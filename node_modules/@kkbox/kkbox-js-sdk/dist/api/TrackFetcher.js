"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Endpoint = require("../Endpoint");

var _Fetcher2 = _interopRequireDefault(require("./Fetcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Get metadata of a track.
 * @see https://docs-en.kkbox.codes/v1.1/reference#tracks
 */
var TrackFetcher =
/*#__PURE__*/
function (_Fetcher) {
  _inherits(TrackFetcher, _Fetcher);

  /**
   * @ignore
   */
  function TrackFetcher(http) {
    var _this;

    var territory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'TW';

    _classCallCheck(this, TrackFetcher);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrackFetcher).call(this, http, territory));
    /**
     * @ignore
     */

    _this.trackID = undefined;
    return _this;
  }
  /**
   * Set the track fetcher's track ID.
   *
   * @param {string} trackID - The ID of a track.
   * @return {Track}
   * @see https://docs-en.kkbox.codes/v1.1/reference#tracks-track_id
   */


  _createClass(TrackFetcher, [{
    key: "setTrackID",
    value: function setTrackID(trackID) {
      this.trackID = trackID;
      return this;
    }
    /**
     * Get metadata of the track with the track fetcher.
     *
     * @return {Promise}
     * @example api.trackFetcher.setTrackID('KpnEGVHEsGgkoB0MBk').fetchMetadata();
     * @see https://docs-en.kkbox.codes/v1.1/reference#tracks-track_id
     */

  }, {
    key: "fetchMetadata",
    value: function fetchMetadata() {
      return this.http.get(_Endpoint.TRACKS + '/' + this.trackID, {
        territory: this.territory
      });
    }
    /**
     * Get KKBOX web widget uri of the track.
     * @example https://widget.kkbox.com/v1/?id=8sD5pE4dV0Zqmmler6&type=song
     * @return {string}
     */

  }, {
    key: "getWidgetUri",
    value: function getWidgetUri() {
      return "https://widget.kkbox.com/v1/?id=".concat(this.trackID, "&type=song");
    }
  }]);

  return TrackFetcher;
}(_Fetcher2["default"]);

exports["default"] = TrackFetcher;