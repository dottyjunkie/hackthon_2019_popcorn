"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Endpoint = require("../Endpoint");

var _Fetcher2 = _interopRequireDefault(require("./Fetcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * The fetcher that can fetch chart playlists.
 * @see https://docs-en.kkbox.codes/v1.1/reference#charts
 */
var ChartFetcher =
/*#__PURE__*/
function (_Fetcher) {
  _inherits(ChartFetcher, _Fetcher);

  /**
   * @ignore
   */
  function ChartFetcher(http) {
    var _this;

    var territory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'TW';

    _classCallCheck(this, ChartFetcher);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChartFetcher).call(this, http, territory));
    /**
     * @ignore
     */

    _this.playlistID = undefined;
    return _this;
  }
  /**
   * Fetch chart playlists.
   *
   * @return {Promise}
   * @example api.chartFetcher.fetchCharts();
   * @see https://docs-en.kkbox.codes/v1.1/reference#charts_1
   */


  _createClass(ChartFetcher, [{
    key: "fetchCharts",
    value: function fetchCharts() {
      return this.http.get(_Endpoint.CHARTS, {
        territory: this.territory
      });
    }
    /**
     * Init the chart fetcher.
     *
     * @param {string} playlistID - The playlist ID.
     * @return {ChartFetcher}
     * @see https://docs-en.kkbox.codes/v1.1/reference#charts-playlist_id
     */

  }, {
    key: "setPlaylistID",
    value: function setPlaylistID(playlistID) {
      this.playlistID = playlistID;
      return this;
    }
    /**
     * Fetch playlist of the chart you set.
     *
     * @return {Promise}
     * @example api.chartFetcher.setPlaylistID('4mJSYXvueA8t0odsny').fetchMetadata();
     * @see https://docs-en.kkbox.codes/v1.1/reference#charts-playlist_id
     */

  }, {
    key: "fetchMetadata",
    value: function fetchMetadata() {
      return this.http.get(_Endpoint.CHARTS + '/' + this.playlistID, {
        territory: this.territory
      });
    }
    /**
     * Fetch tracks of the playlist with the chart fetcher you init. Result will be paged.
     *
     * @param {number} [limit] - The size of one page.
     * @param {number} [offset] - The offset index for first element.
     * @return {Promise}
     * @example api.chartFetcher.setPlaylistID('4mJSYXvueA8t0odsny').fetchTracks();
     * @see https://docs-en.kkbox.codes/v1.1/reference#charts-playlist_id-tracks
     */

  }, {
    key: "fetchTracks",
    value: function fetchTracks() {
      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      return this.http.get(_Endpoint.CHARTS + '/' + this.playlistID + '/tracks', {
        territory: this.territory,
        limit: limit,
        offset: offset
      });
    }
  }]);

  return ChartFetcher;
}(_Fetcher2["default"]);

exports["default"] = ChartFetcher;